«IMPORT org::applause::applausedsl::applauseDsl»

«EXTENSION templates::iphone::Extensions»
«EXTENSION templates::MetamodelExtensions»

«DEFINE main FOR Application-»
«EXPAND view FOREACH model().elements.typeSelect(TableView)»
«ENDDEFINE»

«DEFINE view FOR TableView»
«EXPAND viewHeader»
«EXPAND viewModule»
«ENDDEFINE»

«DEFINE viewHeader FOR TableView»
«FILE class().h()-»
«EXPAND ObjC::Import FOREACH class().headerImports() ONFILECLOSE-»

@interface «class().name» : «use("BoxTableViewController")» {
	«use('BindingContext')» *fBindings;
«providers().collect(p|"\t" + p.type() + p.ivar()).statements()»
}

«initSignature()»;

@end
«ENDFILE»
«ENDDEFINE»

«DEFINE viewModule FOR TableView»
«FILE class().m()-»
«EXPAND ObjC::Import FOREACH class().moduleImports() ONFILECLOSE-»

@implementation «class().name»

«initSignature()» {
	self = [super initWithStyle:«style.constant()»];
	if (self != nil) {
		fBindings = [[BindingContext alloc] init];
		«parameters().collect(p|p.ivar() + " = [" + p.name + " retain]").statements()»
		«variables.collect(p|p.ivar() + " = [" + p.value.contentProvider('', '') + " retain]").statements("\n\t\t")»
	}
	return self;
}

- (void) update {
	«IF title!=null»self.title = «title.resolve()»;«ENDIF»
	«providers().collect(p|"[" + p.ivar() + " request]").statements("\n\t")»

	«use('TableBuilder')» *table = [TableBuilder builder];
«FOREACH sections AS section-»

	[table section«section.title==null ? '' : ':' + section.title.expression('', '')»];
«FOREACH section.cells AS cell ITERATOR i-»
	{
«IF cell.iterator!=null-»
		ContentProvider *content = «cell.iterator.collection.providerExpression()»;
		ContentProviderPlaceholder *cell = [[«use('ContentProviderPlaceholder')» alloc] initWithContentProvider:content mapping:[SelectorAction actionWithObject:self selector:@selector(«cell.iterator.name»Cell:)]];
		cell.loadingCurtainItems = [NSArray arrayWithObject:[«use('ActivityCell')» activityCell]];
		cell.errorMapping = [«use('SelectorAction')» actionWithObject:[«use('CommonCells')» class] selector:@selector(textCellWithError:)];
«ELSE-»
		«cell.constructStatements(null).statements("\n\t\t")»
«ENDIF-»
		[table cell:cell];
		[cell release];
	}
«ENDFOREACH-»
«ENDFOREACH-»
	[self setSections:table.sections];
}

«EXPAND cellProviderMethod FOREACH sections.cells.select(e|e.iterator!=null)-»
«EXPAND cellActionMethod FOREACH sections.cells.select(e|e.action!=null)-»
«EXPAND dealloc-»
@end
«ENDFILE»
«ENDDEFINE»



«DEFINE cellProviderMethod FOR SectionCell-»
«LET this.iterator AS it-»
- (UITableViewCell *) «it.name»Cell:(«it.rootParameter().description.type.objcType()» *)«it.name» {
	«this.constructStatements(it.name).statements("\n\t")»
	cell.data = «it.name»;
	return [cell autorelease];
}
«ENDLET»
«ENDDEFINE»



«DEFINE cellActionMethod FOR SectionCell-»
«EXPAND cellActionMethod(this) FOR this.action-»
«ENDDEFINE»

«DEFINE cellActionMethod(SectionCell cell) FOR ViewAction-»
«ENDDEFINE»

«DEFINE cellActionMethod(SectionCell cell) FOR ViewCall-»
«LET cell.iterator AS it-»
- (void) «cell.idname()»CellSelected:(BoxCell *)cell {
«IF it!=null-»
	«it.rootParameter().description.type.objcType()» *«cell.idname()» = cell.data;
«ENDIF-»
	UIViewController *controller = «this.factoryCall(cell.idname(), '')»;
	[self.navigationController pushViewController:controller animated:YES];
}
«ENDLET»
«ENDDEFINE»



«DEFINE dealloc FOR TableView-»
- (void) dealloc {
	[fBindings release];
	«providers().collect(p|"[" + p.ivar() + " release]").statements("\n\t")»
	[super dealloc];
}

«ENDDEFINE»