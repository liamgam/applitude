«IMPORT org::applause::applausedsl::applauseDsl»

«EXTENSION templates::iphone::Extensions»
«EXTENSION templates::MetamodelExtensions»

«DEFINE main FOR Application-»
«EXPAND view FOREACH model().elements.typeSelect(TableView)»
«ENDDEFINE»

«DEFINE view FOR TableView»
«EXPAND viewHeader»
«EXPAND viewModule»
«ENDDEFINE»

«DEFINE viewHeader FOR TableView»
«FILE class().h()-»
«EXPAND ObjC::Import FOREACH class().headerImports() ONFILECLOSE-»

@interface «class().name» : «use("BoxTableViewController")» {
	«use('BindingContext')» *fBindings;
«parameters().collect(p|"\t" + p.type() + p.ivar()).statements()»
}

«initSignature()»;

@end
«ENDFILE»
«ENDDEFINE»

«DEFINE viewModule FOR TableView»
«FILE class().m()-»
«EXPAND ObjC::Import FOREACH class().moduleImports() ONFILECLOSE-»

@implementation «class().name»

«initSignature()» {
	self = [super initWithStyle:«style.constant()»];
	if (self != nil) {
		fBindings = [[BindingContext alloc] init];
		«parameters().collect(p|p.ivar() + " = [" + p.name + " retain]").statements()»
	}
	return self;
}

- (void) update {
	«IF title!=null»self.title = «title.resolve()»;«ENDIF»
	«parameters().collect(p|"[" + p.ivar() + " request]").statements()»

	«use('TableBuilder')» *table = [TableBuilder builder];
«FOREACH sections AS section-»

	[table section«section.title==null ? '' : ':' + section.title.expression('', '')»];
«FOREACH section.cells AS cell ITERATOR i-»
	{
«IF cell.iterator!=null-»
		ContentProviderPlaceholder *cell = [[«use('ContentProviderPlaceholder')» alloc] initWithController:self cellFactorySelector:@selector(«cell.iterator.name»Cell:) contentProvider:«cell.iterator.rootParameter().ivar()»];
«ELSE-»
		«cell.constructStatements(null).statements("\n\t\t")»
«ENDIF-»
		[table cell:cell];
		[cell release];
	}
«ENDFOREACH-»
«ENDFOREACH-»
	[self setSections:table.sections];
}

«EXPAND cellProviderMethod FOREACH sections.cells.select(e|e.iterator!=null)-»
«EXPAND cellActionMethod FOREACH sections.cells.select(e|e.action!=null)-»
«EXPAND dealloc-»
@end
«ENDFILE»
«ENDDEFINE»



«DEFINE cellProviderMethod FOR SectionCell-»
«LET this.iterator AS it-»
- (UITableViewCell *) «it.name»Cell:(«it.rootParameter().description.type.objcType()» *)«it.name» {
	«this.constructStatements(it.name).statements("\n\t")»
	cell.data = «it.name»;
	return [cell autorelease];
}
«ENDLET»
«ENDDEFINE»



«DEFINE cellActionMethod FOR SectionCell-»
«EXPAND cellActionMethod(this) FOR this.action-»
«ENDDEFINE»

«DEFINE cellActionMethod(SectionCell cell) FOR ViewAction-»
«ENDDEFINE»

«DEFINE cellActionMethod(SectionCell cell) FOR ViewCall-»
«LET cell.iterator AS it-»
- (void) «cell.idname()»CellSelected:(BoxCell *)cell {
«IF it!=null-»
	«it.rootParameter().description.type.objcType()» *«cell.idname()» = cell.data;
«ENDIF-»
	UIViewController *controller = «this.factoryCall(cell.idname(), '')»;
	[self.navigationController pushViewController:controller animated:YES];
}
«ENDLET»
«ENDDEFINE»



«DEFINE dealloc FOR TableView-»
- (void) dealloc {
	[fBindings release];
	«parameters().collect(p|"[" + p.ivar() + " release]").statements()»
	[super dealloc];
}

«ENDDEFINE»




«DEFINE sectionCount FOR TableView»«IF sections.size != 1»
/*
 * Return the number of sections in this table.
 */
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
	if(!contentProvider || !contentProvider.content || contentProvider.loading) {
		return 0;
	}
	else {
		return «sections.size»;
	}
}
«ENDIF»«ENDDEFINE»

«DEFINE sectionTitleHeader FOR TableView»«IF sections.reject(e|e.title == null).size > 0-»
/*
 * Return the number of rows in this section.
 */
- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
«FOREACH sections AS s ITERATOR i SEPARATOR "else" -»
«IF s.title != null-»
	if(section == «i.counter0») {
		return «s.title.expression('', '')»;
	}
«ENDIF-»
«ENDFOREACH-»
}
«ENDIF-»«ENDDEFINE»

«DEFINE rowCounts FOR TableView»
/*
 * Return the number of sections in this table.
 */
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
«FOREACH sections AS s ITERATOR i-»
	if(section == «i.counter0») {
		return «s.cells.rowCount().toString(" + ")»;
	} else
«ENDFOREACH-»
		return 0;
}
«ENDDEFINE»

«DEFINE cellDescriptions FOR View»«ENDDEFINE»

«DEFINE cellDescriptions FOR TableView»
/*
 * Specify the NIB which contains the custom cell we want to use.
 */
- (NSString *)tableView:(UITableView *)tableView nibNameForRowAtIndexPath:(NSIndexPath *)indexPath {
	«LET firstCell() AS c-»
	return @"«c.type()»CustomCell2";
	«ENDLET-»
}

/*
 * Configure the contents of the current cell, i.e. fill it with data.
 */
- (void)tableView:(UITableView *)tableView configureCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
	«LET firstCell() AS c-»
	id item = [self.items objectAtIndex: indexPath.row];
	«EXPAND cellContent('', 'item', '') FOR c»	
	«ENDLET-»
}
«ENDDEFINE»

«DEFINE cellConstraint(Integer section, Integer row) FOR SectionCell-»
«IF iterator==null»indexPath.section == «section» && indexPath.row == «row-»
«ELSE»indexPath.section == «section»«ENDIF-»
«ENDDEFINE»


«DEFINE cellContent(String indent) FOR SectionCell-»
	«IF iterator!=null-»
	id item = [[«iterator.collection.expression('contentProvider', 'content')» asArray] objectAtIndex: indexPath.row];
	«EXPAND cellContent(indent, 'item', '')-»
	«ELSE-»
	«EXPAND cellContent(indent, 'contentProvider', 'content')-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE cellContent(String indent, String kvcTarget, String kvcPrefix) FOR SectionCell»
	«indent»«IF text!=null»cell.textLabel.text = «text.expression(kvcTarget, kvcPrefix)»;«ENDIF»
	«indent»«IF details!=null»cell.detailTextLabel.text = «details.expression(kvcTarget, kvcPrefix)»;«ENDIF»
	«indent»«IF image!=null»NSString *imageURL = «image.expression(kvcTarget, kvcPrefix)»;
	«indent»cell.imageView.image = [self 
	«indent»						getImage: imageURL 
	«indent»						withLoadingImage:@"personLoading.png" 
	«indent»						andErrorImage:@"personUnknown.png"];«ENDIF-»
«ENDDEFINE»

«DEFINE cellSelections FOR View»«ENDDEFINE»
«DEFINE cellSelections FOR TableView»
/*
 * User tapped a table cell, navigate to the next screen.
 */
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	id item = [self.items objectAtIndex: indexPath.row];
	«EXPAND cellAction('item', '') FOR firstCell().action»
}
«ENDDEFINE»

«DEFINE cellAction FOR SectionCell»
	«IF iterator!=null»id item = [[«iterator.collection.expression('contentProvider', 'content')»asArray] objectAtIndex: indexPath.row];
	«EXPAND cellAction('item', '') FOR action»«ELSE»
	«EXPAND cellAction('contentProvider', 'content') FOR action»
	«ENDIF-»
«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ViewAction»«this.metaType»«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ViewCall-»
	ContentProvider *provider = «provider.contentProvider('(' + application().providerFactory().name + '*)contentProvider.providers', kvcTarget, kvcPrefix)»;
	«view.class().use()» *controller = [[«view.class().use()» alloc] init];
	controller.contentProvider = provider;
	[self.navigationController pushViewController: controller animated: TRUE];
	[controller release];
«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ExternalOpen-»
		NSString *urlString = «url.expression(kvcTarget, kvcPrefix)»;
		[[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];
«ENDDEFINE»

«DEFINE staticData FOR TableView-»
/*
 * Update the data displayed in this table.
 */
-(void)updateData {
	«EXPAND staticData2»
	[super updateData];
}
«ENDDEFINE»

«DEFINE staticData2 FOR View»«ENDDEFINE»
