import org::eclipse::emf::ecore;
import org::applause::applausedsl::applauseDsl;

extension org::eclipse::xtend::util::stdlib::io;
extension templates::MetamodelExtensions;

// Objective C language support

String use(String name):
	use(newProjectClass(name));

String silentUse(String name):
	use(newProjectClass(name)) != null ? "" : "";

String use(ProjectClass projectClass):
	JAVA templates.Extensions.use(org.applause.applausedsl.applauseDsl.ProjectClass);

Void useImportBag(Set[ProjectClass] bag):
	JAVA templates.Extensions.useImportBag(java.util.Set);

objcImports(Collection[String] classNames):
	classNames.toSet().remove(null).remove("").collect(e|"#import \"" + e + '.h";').toString("\n");

create Set[ProjectClass] bagHeaderImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

create Set[ProjectClass] bagModuleImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

Collection[ProjectClass] withoutBuiltIns(Collection[ProjectClass] classes):
	classes.reject(e|e.name.startsWith("UI") || e.name.startsWith("NS"));

List[ProjectClass] headerImports(ProjectClass class):
	class.bagHeaderImports().withoutBuiltIns().without({class}).sortBy(e|e.name);

List[ProjectClass] moduleImports(ProjectClass class):
	{class, class.bagModuleImports().withoutBuiltIns().without(class.bagHeaderImports()).without({class}).sortBy(e|e.name)}.flatten();

cached ProjectClass newProjectClass(String name):
	JAVA templates.Extensions.createProjectClass(java.lang.String);

h(ProjectClass class):
	useImportBag(class.bagHeaderImports()) -> (class.name + ".h");

m(ProjectClass class):
	useImportBag(class.bagModuleImports()) -> (class.name + ".m");

allocInit(ProjectClass class):
	"[[" + use(class) + " alloc] init]";

statements(Collection[String] strings):
	strings.statements("\n");

statements(Collection[String] strings, String nl):
	strings.without({null}).collect(e|e + ";").toString(nl);

pointer(ProjectClass class):
	use(class) + " *";

indent(String this):
	this;



/* Views */

class(View this):
	newProjectClass(this.name.toFirstUpper() + "ViewController");

class(CustomView this):
	newProjectClass(this.className);

class(Type this):
	newProjectClass(this.name);



/* View Accessor */
viewFactory(Application app):
	newProjectClass(app.name + "Views");

class(TabView view):
	"UITabBarController".use();

initSignature(View view):
	"- (id) init" + view.initParameters();

initParameters(View view):
	(view.parameters().isEmpty ? "" : "With") + view.parameters().signature().toString(" ").toFirstUpper();

initParametersForward(View view):
	(view.parameters().isEmpty ? "" : "With") + view.parameters().collect(param|param.name + ":" + param.name).toString(" ").toFirstUpper();

factoryMethodSignature(View view):
	"+ (" + view.class().use() + " *) " + view.factoryMethodName() + view.initParameters();

factoryMethodName(View view):
	"create" + view.name;

factoryCall(ViewCall call, String kvcTarget, String kvcPrefix):
	//TODO: make sharedProviders the default for provider access
	//TODO: support proper multiple parameters, bind parameters properly
	"[" + use(application(call.view).viewFactory()) + " " + call.view.factoryMethodName() + (call.provider != null ? "With" + call.view.content.name.toFirstUpper() + ":" + call.provider.contentProvider(kvcTarget, kvcPrefix) : "") + "]";

/* TableView */

constant(TableViewStyle style):
	"UITableViewStyle" + style.name;

constant(CellType type):
	"UITableViewCellStyle" + type.literal;

constant(CellAccessory ac):
	switch(ac.name) {
		case 'Link' : 'UITableViewCellAccessoryDisclosureIndicator'
		case 'Detail' : 'UITableViewCellAccessoryDetailDisclosureButton'
		case 'Check' : 'UITableViewCellAccessoryCheckmark'
		default : 'UITableViewCellAccessoryNone'
	};

idname(Cell cell):
	cell.iterator != null
		? cell.iterator.name
		// TODO: using the text is a hack, find a better way to derive a
		// variable name for cells 
		: ((StringLiteral.isInstance(cell.text))
				? ((StringLiteral)cell.text).value.toLowerCase().replaceAll("[^a-z]", "")
				: "<none>");

//TOOD: cell is handed in to calculate unique cell selector name for ViewCall - there has to be a better way
action(ViewAction this, Cell cell):
	throwError("action not supported for " + this);

action(ViewCall call, Cell cell):
	'[' + "SelectorAction".use() + ' actionWithObject:self selector:@selector(' + cell.idname() + 'CellSelected:)]';

action(Selector sel, Cell cell):
	'[' + "SelectorAction".use() + ' actionWithObject:self selector:@selector(' + sel.name + ')]';

providers(View view):
	view.parameters();
	
providers(TableView view):
	{ view.parameters(), view.variables }.flatten();

parameters(View view):
	(List[Parameter]) (view.content != null ? { view.content } : {});

signature(Parameter param):
	param.name + ":(" + param.type() + ")" + param.name;

type(Parameter param):
	newProjectClass('ContentProvider').pointer();

ivar(Parameter param):
	"f" + param.name.toFirstUpper();



// Construction of content elements

String constructionStatements(ViewContentElement this, String kvcTarget):
	throwError("constructionStatements not supported for " + this);

cellClass(Cell cell):
	cell.image != null ? use('ImageCell') : use('BoxCell');

constructionStatements(Cell cell, String kvcTarget):
	 cell.cellClass() + ' *cell = [[[' + cell.cellClass() + ' alloc] initWithStyle:' + cell.type.constant() + " reuseIdentifier:nil] autorelease];\n"
	 + cell.text.assignment('cell.textLabel', 'text', kvcTarget)
	 + cell.details.assignment('cell.detailTextLabel', 'text', kvcTarget)
	 + cell.image.assignment('cell', 'imageUrl', kvcTarget)
	 + ((cell.accessory.ordinal() == 0 && cell.action != null) ? 'cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;\n' : "")
	 + ((cell.accessory.ordinal() > 0) ? 'cell.accessoryType = ' + cell.accessory.constant() + ";\n" : "")
	 + ((cell.action != null) ? 'cell.onTouch = ' + action(cell.action, cell) + ";\n" : "")
	 + ((kvcTarget != null) ? 'cell.data = ' + kvcTarget + ';\n' : "[self cell:cell];\n");

constructionStatements(Section section, String kvcTarget):
	 (kvcTarget == null ? '' : use('Section') + ' *section = ')
	 + '[self section' + (section.title == null ? '' : 'WithTitle:' + section.title.expression(kvcTarget, '')) + '];\n'
	 + section.cells.constructionStatements(kvcTarget);


String shortName(ViewContentElement this): "shortName undefined";
String shortName(Cell this): "cell";
String shortName(Section this): "section";

String targetType(ViewContentElement this): "targetType undefined";
String targetType(Cell this): "UITableViewCell";
String targetType(Section this): "Section";


iteratorConstructionStatement(ViewContentElement e, String kvcTarget):
	"[self " + e.shortName() + "s:@selector(" + e.iterator.name + e.shortName().toFirstUpper() + ":) "+
				((kvcTarget == null)
					? "forContentProvider:" + e.iterator.collection.providerExpression()
					: "forList:" + e.iterator.collection.expression(kvcTarget, ''))
			  + "];\n";


constructionStatements(List[ViewContentElement] elements, String kvcTarget):
	elements.collect(e|
		let code = (e.iterator == null ? e.constructionStatements(null) : e.iteratorConstructionStatement(kvcTarget))
			: ((kvcTarget == null && Cell.isInstance(e)) ? "{\n\t" + code.indent() + "}\n" : code)	
	 ).toString("\n");




// providerExpression returns the obj c code to resolve an expression
// to a content provider that contains the expression result. This is work
// in progress, currently only straightforward cases are supported.
// See http://ralfebert.github.com/iApplause/#model_expressions

providerExpression(CollectionExpression this):
	"<providerExpression is abstract for: " + this + ">";

providerExpression(ObjectReference expr):
	expr.tail == null
		? expr.object.providerExpression()
		: silentUse("ContentProvider+Nested") + "[ContentProvider nestedContentProviderWithContentProvider:" + expr.object.providerExpression() +
		                  " keyPath:@\"" + expr.tail.keyPath().toString(".") + "\"]";

providerExpression(PropertyPathPart this):
	"<providerExpression is abstract for: " + this + ">";

providerExpression(Parameter parameter):
	parameter.ivar();





// going straight for the root parameter was a quick hack and is almost
// always wrong -> this is deprecated, will be removed, extensions
// that truly resolve the expression, like expression or providerExpression
// should be used instead

Parameter rootParameter(CollectionExpression this):
	throwError("rootParameter not supported for " + this);

Parameter rootParameter(ScalarExpression this):
	throwError("rootParameter not supported for " + this);

Parameter rootParameter(StringLiteral expr):
	null;

Parameter rootParameter(ObjectReference ref):
 	ref.object.rootParameter();

Parameter rootParameter(PropertyPathPart this):
	throwError("rootParameter not supported for " + this);

Parameter rootParameter(Parameter param):
 	param;

Parameter rootParameter(CollectionIterator it):
 	it.collection.rootParameter();


// If expr goes back to a parameter (=supplied by a content provider), resolve via content provider
// otherwise resolve directly
resolve(ScalarExpression expr):
	expr.rootParameter() != null
		? expr.expression(expr.rootParameter().ivar(), 'content')
		: expr.expression('', '');



assignment(Void expr, String targetObject, String targetProperty, String kvcTarget):
	'';

assignment(ScalarExpression this, String targetObject, String targetProperty, String kvcTarget):
	throwError("assignment not supported for " + this);

assignment(StringLiteral expr, String targetObject, String targetProperty, String kvcTarget):
	targetObject + "." + targetProperty + " = " + expr.expression(kvcTarget, '') + ";\n";

assignment(ObjectReference expr, String targetObject, String targetProperty, String kvcTarget):
	kvcTarget == null ? '[fBindings bind:' + expr.rootParameter().ivar() + ' property:@"' + expr.keyPath('content').toString('.') + '" to:' + targetObject + ' property:@"' + targetProperty + '"];\n'
	                  : targetObject + "." + targetProperty + " = " + expr.expression(kvcTarget, '') + ";\n";



/* Providers */
providerFactory(Application app):
	newProjectClass(app.name + "Providers");

sharedProviderFactory(Application app):
	"[" + app.providerFactory().use() + " sharedProviders]";

applicationDelegate(Application app):
	newProjectClass(app.name + "AppDelegate");

class(ContentProviderImplementation this):
	Void;

class(FetchingContentProviderImplementation this):
	newProjectClass("UrlContentProvider");

class(CustomContentProviderImplementation this):
	newProjectClass(this.providerClass.name);

ivar(ContentProvider provider):
	"f" + provider.name.toFirstUpper();




objcType(Type this):
	throwError("objcType not supported for " + this);

objcType(SimpleType type):
	type.platformType;

objcType(Entity type):
	type.runtimeType ? type.name : "NSDictionary";




type(Cell this):
	type.toString().toFirstUpper();
	
firstCell(TableView this):
	sections.first().cells.first();
	
hasBindings(TableView this):
	!this.sections.select(e|e.iterator == null)
	     .cells.select(e|e.iterator == null)
	     .select(e|ObjectReference.isInstance(e.text)
	     || ObjectReference.isInstance(e.details)
	     || ObjectReference.isInstance(e.image))
	     .isEmpty;

expression(Expression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(CollectionExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(StringSplit s, String kvcTarget, String kvcPrefix):
	"[" + expression(s.value, kvcTarget, kvcPrefix) + " componentsSeparatedByString: " + expression(s.delimiter, kvcTarget, kvcPrefix) + "]";

expression(ScalarExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";

String replaceSettings(String string):
	JAVA templates.Extensions.replaceSettings(java.lang.String);

expression(StringLiteral this, String kvcTarget, String kvcPrefix):
	value.replaceSettings();
	
expression(StringConcat this, String kvcTarget, String kvcPrefix):
	'[NSString stringWithFormat:@"' 
		+ values.collect(e|"%@").toString("") + '", '
		+ values.expression(kvcTarget, kvcPrefix).toString(", ") + "]";
		
expression(StringUrlConform this, String kvcTarget, String kvcPrefix):
	'[' + value.expression(kvcTarget, kvcPrefix) + ' stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]';
	
expression(StringReplace this, String kvcTarget, String kvcPrefix):
	'[' + 
	value.expression(kvcTarget, kvcPrefix) +
	' stringByReplacingOccurrencesOfString:' + 
	match.expression(kvcTarget, kvcPrefix) +
	' withString:' +
	replacement.expression(kvcTarget, kvcPrefix) +
	']';
	
List[String] keyPath(ObjectReference this):
	tail == null ? {object.name} : {object.name}.addAll(tail.keyPath());

List[String] keyPath(ObjectReference this, String kvcPrefix):
	let head = (kvcPrefix != "" ? {kvcPrefix} : {}):
		head.addAll(keyPath().withoutFirst());
	
expression(ObjectReference this, String kvcTarget, String kvcPrefix):
	let keyPath = keyPath(kvcPrefix):
		keyPath.isEmpty ? 
			kvcTarget : 
			'[' + kvcTarget + ' ' + ((keyPath.size > 1) ? 'valueForKeyPath' : 'valueForKey') + ':@"' + keyPath.toString('.') + '"]';
	
contentProvider(ProviderConstruction this, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + metaType + ">";

contentProvider(SimpleProviderConstruction this, String kvcTarget, String kvcPrefix):
	'[' + use('SimpleContentProvider') + ' providerWithContent:' +
	expression.expression(kvcTarget, kvcPrefix) + ' name:@""]';
	 
contentProvider(ComplexProviderConstruction this, String kvcTarget, String kvcPrefix):
	'[' + this.application().sharedProviderFactory() + ' providerFor' + provider.name + 
		(argument == null ? '' : ': ' + argument.expression(kvcTarget, kvcPrefix) )
	+ ']';
	
rowCount(Cell this):
	iterator == null ? 1 : '[[' + iterator.collection.expression('contentProvider', 'content') +' asArray] count]'; 
	
methodSignature(ContentProvider p):
	'- (' + use('ContentProvider') + ' *) providerFor' + p.name + (
		p.parameter != null ? ':(id)' + p.parameter.name : '') 
	;
	
allProviders(Application this):
	model().elements.typeSelect(ContentProvider);
	
allViews(Application this):
	model().elements.typeSelect(View);
	
allViewClasses(Application this):
	model().elements.typeSelect(View).removeAll(model().elements.typeSelect(TabView));