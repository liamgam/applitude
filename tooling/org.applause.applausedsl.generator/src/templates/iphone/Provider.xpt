«IMPORT org::applause::applausedsl::applauseDsl»

«EXTENSION templates::iphone::Extensions»

«DEFINE main FOR Application-»
«EXPAND headerFile»
«EXPAND moduleFile»
«ENDDEFINE»


«DEFINE headerFile FOR Application»
«FILE providerFactory().h()-»
«EXPAND ObjC::Import FOREACH providerFactory().headerImports() ONFILECLOSE-»

@interface «use(providerFactory())» : NSObject {
	«allProviders().select(e|e.storing).collect(e|use("IPContentProvider")+" *"+e.ivar()+";").toString("\n\t")»
}

+ («use(providerFactory())» *) sharedProviders;

«allProviders().methodSignature().statements()»

@end
«ENDFILE»
«ENDDEFINE»




«DEFINE moduleFile FOR Application»
«FILE providerFactory().m()-»
«EXPAND ObjC::Import FOREACH providerFactory().moduleImports() ONFILECLOSE-»

@implementation «use(providerFactory())»

static «use(providerFactory())» *sharedProviders = nil;

+ («use(providerFactory())» *) sharedProviders {
	@synchronized(self) {
		if (sharedProviders == nil)
			sharedProviders = [[self alloc] init];
	}
	return sharedProviders;
}
«EXPAND providerMethodImplementation FOREACH allProviders()-»

@end
«ENDFILE»
«ENDDEFINE»



«DEFINE providerMethodImplementation FOR ContentProvider»
«methodSignature()» {
	«IF !this.storing-»
	return [«EXPAND constructProvider-» autorelease];
	«ELSE-»
	if (!«this.ivar()») {
		«this.ivar()» = «EXPAND constructProvider-»;
	}
	return «this.ivar()»;
	«ENDIF-»
}
«ENDDEFINE»



«DEFINE constructProvider FOR ContentProvider-»
«IF this.implementation == null-»
[[IPSimpleContentProvider alloc] initWithContent:[«type.class().allocInit()» autorelease]]«ELSE-»
«EXPAND constructProvider(this) FOR this.implementation-»
«ENDIF-»«ENDDEFINE»



«DEFINE constructProvider(ContentProvider provider) FOR ContentProviderImplementation»
	<Unknown «provider»> 
«ENDDEFINE»

«DEFINE constructProvider(ContentProvider provider) FOR FetchingContentProviderImplementation-»
«LET provider.parameter.name != null ? provider.parameter.name : '' AS kvcTarget-»
[[«use(this.class())» alloc] initWithURL:[NSURL URLWithString:«url.expression(kvcTarget, '')»]]«ENDLET-»«ENDDEFINE»

«DEFINE constructProvider(ContentProvider provider) FOR CustomContentProviderImplementation-»
«this.class().allocInit()»«ENDDEFINE»