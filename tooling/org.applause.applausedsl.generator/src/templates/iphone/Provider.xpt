«IMPORT org::applause::applausedsl::applauseDsl»

«EXTENSION templates::iphone::Extensions»

«DEFINE main FOR Application-»
«EXPAND headerFile»
«EXPAND moduleFile»
«ENDDEFINE»


«DEFINE headerFile FOR Application»
«FILE providerFactory().h()-»
«EXPAND ObjC::Import FOREACH providerFactory().headerImports() ONFILECLOSE-»

@interface «use(providerFactory())» : NSObject {
	«allProviders().select(e|e.storing).collect(e|use("ContentProvider")+" *"+e.ivar()+";").toString("\n\t")»
}

+ («use(providerFactory())» *) sharedProviders;

«allProviders().methodSignature().statements()»

@end
«ENDFILE»
«ENDDEFINE»




«DEFINE moduleFile FOR Application»
«FILE providerFactory().m()-»
«EXPAND ObjC::Import FOREACH providerFactory().moduleImports() ONFILECLOSE-»

@implementation «use(providerFactory())»

static «use(providerFactory())» *sharedProviders = nil;

+ («use(providerFactory())» *) sharedProviders {
	@synchronized(self) {
		if (sharedProviders == nil)
			sharedProviders = [[self alloc] init];
	}
	return sharedProviders;
}
«EXPAND providerMethodImplementation FOREACH allProviders()-»

@end
«ENDFILE»
«ENDDEFINE»



«DEFINE providerMethodImplementation FOR ContentProvider»
«methodSignature()» {
	«IF !this.storing-»
		«EXPAND constructProvider-»
		return [provider autorelease];
	«ELSE-»
		if (!«this.ivar()») {
			«EXPAND constructProvider-»
			«this.ivar()» = provider;
		}
		return «this.ivar()»;
	«ENDIF-»
}
«ENDDEFINE»



«DEFINE constructProvider FOR ContentProvider-»
«IF this.implementation == null-»
	«use("SimpleContentProvider")» *provider = [[SimpleContentProvider alloc] initWithContent:[«type.class().allocInit()» autorelease] name:@"«name»"];
«ELSE-»
	«EXPAND constructProvider(this) FOR this.implementation-»
«ENDIF-»
«ENDDEFINE»



«DEFINE constructProvider(ContentProvider provider) FOR ContentProviderImplementation»
	<Unknown «provider»> 
«ENDDEFINE»

«DEFINE constructProvider(ContentProvider provider) FOR FetchingContentProviderImplementation-»
«LET provider.parameter.name != null ? provider.parameter.name : '' AS kvcTarget-»
	«use(this.class())» *provider = [[«use(this.class())» alloc] initWithURL:[NSURL URLWithString:«url.expression(kvcTarget, '')»]];
	[provider addFilter:[«use('CommonFilters')» filterFor«this.format.name»]];
«ENDLET-»
«ENDDEFINE»

«DEFINE constructProvider(ContentProvider provider) FOR CustomContentProviderImplementation-»
	«use(this.class())» *provider = «this.class().allocInit()»;
«ENDDEFINE»