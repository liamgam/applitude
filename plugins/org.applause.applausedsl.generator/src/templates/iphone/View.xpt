«IMPORT org::applause::applausedsl::applauseDsl»

«EXTENSION templates::iphone::Extensions»
«EXTENSION templates::MetamodelExtensions»

«DEFINE main FOR Application-»
«EXPAND view FOREACH model().elements.typeSelect(SectionedView)»
«ENDDEFINE»

«DEFINE view FOR SectionedView»
«EXPAND viewHeader»
«EXPAND viewModule»
«ENDDEFINE»

«DEFINE viewHeader FOR View»
«FILE filenameHeader()»
#import <UIKit/UIKit.h>
#import "«baseClassFilenameHeader()»"

@interface «className()» : «baseClassName()» {

}

@end
«ENDFILE»
«ENDDEFINE»

«DEFINE viewModule FOR SectionedView»
«FILE filenameModule()»
#import "«filenameHeader()»"
#import "NSObject+iPhonical.h"
«EXPAND imports-» 

@implementation «className()»

«EXPAND sectionCount-»
«EXPAND sectionTitleHeader-»
«EXPAND rowCounts-»
«EXPAND cellDescriptions-»
«EXPAND cellSelections-»
«EXPAND staticData-»
@end
«ENDFILE»
«ENDDEFINE»

«DEFINE imports FOR SectionedView-»
«FOREACH neededImports() AS import»#import "«import»"
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE sectionCount FOR SectionedView»«IF sections.size != 1»
/*
 * Return the number of sections in this table.
 */
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
	if(!contentProvider || !contentProvider.content || contentProvider.loading) {
		return 0;
	}
	else {
		return «sections.size»;
	}
}
«ENDIF»«ENDDEFINE»

«DEFINE sectionTitleHeader FOR SectionedView»«IF sections.reject(e|e.title == null).size > 0-»
/*
 * Return the number of rows in this section.
 */
- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
«FOREACH sections AS s ITERATOR i SEPARATOR "else" -»
«IF s.title != null-»
	if(section == «i.counter0») {
		return «s.title.expression('', '')»;
	}
«ENDIF-»
«ENDFOREACH-»
}
«ENDIF-»«ENDDEFINE»

«DEFINE rowCounts FOR SectionedView»
/*
 * Return the number of sections in this table.
 */
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
«FOREACH sections AS s ITERATOR i-»
	if(section == «i.counter0») {
		return «s.cells.rowCount().toString(" + ")»;
	} else
«ENDFOREACH-»
		return 0;
}
«ENDDEFINE»

«DEFINE cellDescriptions FOR View»«ENDDEFINE»

«DEFINE cellDescriptions FOR TableView»
/*
 * Specify the NIB which contains the custom cell we want to use.
 */
- (NSString *)tableView:(UITableView *)tableView nibNameForRowAtIndexPath:(NSIndexPath *)indexPath {
	«LET firstCell() AS c-»
	return @"«c.type()»CustomCell2";
	«ENDLET-»
}

/*
 * Configure the contents of the current cell, i.e. fill it with data.
 */
- (void)tableView:(UITableView *)tableView configureCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
	«LET firstCell() AS c-»
	id item = [self.items objectAtIndex: indexPath.row];
	«EXPAND cellContent('', 'item', '') FOR c»	
	«ENDLET-»
}
«ENDDEFINE»

«DEFINE cellConstraint(Integer section, Integer row) FOR SectionCell-»
«IF iterator==null»indexPath.section == «section» && indexPath.row == «row-»
«ELSE»indexPath.section == «section»«ENDIF-»
«ENDDEFINE»

«DEFINE cellDescriptions FOR DetailsView»
/*
 * Specify the NIB which contains the custom cell we want to use.
 */
- (NSString *)tableView:(UITableView *)tableView nibNameForRowAtIndexPath:(NSIndexPath *)indexPath {
«FOREACH sections AS s ITERATOR si-»
«FOREACH s.cells AS c ITERATOR ci-»
	if(«EXPAND cellConstraint(si.counter0, ci.counter0) FOR c») {
		return @"«c.type()»CustomCell2";
	}
«ENDFOREACH-»
«ENDFOREACH-»
	return @"DefaultCustomCell2";
}

/*
 * Configure the contents of the current cell, i.e. fill it with data.
 */
- (void)tableView:(UITableView *)tableView configureCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
«FOREACH sections AS s ITERATOR si-»
«FOREACH s.cells AS c ITERATOR ci-»
	if(«EXPAND cellConstraint(si.counter0, ci.counter0) FOR c») {
		«EXPAND cellContent('	') FOR c»
	}
«ENDFOREACH-»
«ENDFOREACH-»
}
«ENDDEFINE»

«DEFINE cellContent(String indent) FOR SectionCell-»
	«IF iterator!=null-»
	id item = [[«iterator.collection.expression('contentProvider', 'content')» asArray] objectAtIndex: indexPath.row];
	«EXPAND cellContent(indent, 'item', '')-»
	«ELSE-»
	«EXPAND cellContent(indent, 'contentProvider', 'content')-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE cellContent(String indent, String kvcTarget, String kvcPrefix) FOR SectionCell»
	«indent»«IF text!=null»cell.textLabel.text = «text.expression(kvcTarget, kvcPrefix)»;«ENDIF»
	«indent»«IF details!=null»cell.detailTextLabel.text = «details.expression(kvcTarget, kvcPrefix)»;«ENDIF»
	«indent»«IF image!=null»NSString *imageURL = «image.expression(kvcTarget, kvcPrefix)»;
	«indent»cell.imageView.image = [self 
	«indent»						getImage: imageURL 
	«indent»						withLoadingImage:@"personLoading.png" 
	«indent»						andErrorImage:@"personUnknown.png"];«ENDIF-»
«ENDDEFINE»

«DEFINE cellSelections FOR View»«ENDDEFINE»
«DEFINE cellSelections FOR TableView»
/*
 * User tapped a table cell, navigate to the next screen.
 */
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	id item = [self.items objectAtIndex: indexPath.row];
	«EXPAND cellAction('item', '') FOR firstCell().action»
}
«ENDDEFINE»

«DEFINE cellAction FOR SectionCell»
	«IF iterator!=null»id item = [[«iterator.collection.expression('contentProvider', 'content')»asArray] objectAtIndex: indexPath.row];
	«EXPAND cellAction('item', '') FOR action»«ELSE»
	«EXPAND cellAction('contentProvider', 'content') FOR action»
	«ENDIF-»
«ENDDEFINE»


«DEFINE cellSelections FOR DetailsView»
/*
 * User tapped a table cell, navigate to the next screen.
 */
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
«FOREACH sections AS s ITERATOR si»
«FOREACH s.cells AS c ITERATOR ci»
	if(«EXPAND cellConstraint(si.counter0, ci.counter0) FOR c») {
	«EXPAND cellAction FOR c»	
	} else
«ENDFOREACH-»
«ENDFOREACH-»
		return;
}
«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ViewAction»«this.metaType»«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ViewCall-»
	IPContentProvider *provider = «provider.contentProvider('(' + application().providerFactory().name + '*)contentProvider.providers', kvcTarget, kvcPrefix)»;
	«view.className()» *controller = [[«view.className()» alloc] init];
	controller.contentProvider = provider;
	[self.navigationController pushViewController: controller animated: TRUE];
	[controller release];
«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ExternalOpen-»
		NSString *urlString = «url.expression(kvcTarget, kvcPrefix)»;
		[[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];
«ENDDEFINE»

«DEFINE staticData FOR SectionedView-»
/*
 * Update the data displayed in this table.
 */
-(void)updateData {
	«IF title!=null»self.navigationItem.title = «title.expression('contentProvider', 'content')»;«ENDIF»
	«EXPAND staticData2»
	[super updateData];
}
«ENDDEFINE»

«DEFINE staticData2 FOR View»«ENDDEFINE»
«DEFINE staticData2 FOR DetailsView»
	if(contentProvider && contentProvider.content && !contentProvider.loading) {
		«IF header!=null && header.title!=null»self.headerView.titleLabel.text = «header.title.expression('contentProvider', 'content')»;«ENDIF»
		«IF header!=null && header.subtitle!=null»self.headerView.subtitleLabel.text = «header.subtitle.expression('contentProvider', 'content')»;«ENDIF»
		«IF header!=null && header.details!=null»self.headerView.detailsLabel.text = «header.details.expression('contentProvider', 'content')»;«ENDIF»
		«IF header!=null && header.image!=null»NSString *imageURL = «header.image.expression('contentProvider', 'content')»;
		self.headerView.image.image = [self 
										getImage: imageURL 
										withLoadingImage:@"personLoading.png" 
										andErrorImage:@"personUnknown.png"];«ENDIF»
	}	
«ENDDEFINE»