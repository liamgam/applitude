import org::eclipse::emf::ecore;
import org::applause::applausedsl::applauseDsl;

extension templates::MetamodelExtensions;

className(View this):
	this.name.toFirstUpper() + "ViewController";

className(CustomView this):
	this.className;

filenameHeader(View this):
	className() + ".h";
	
filenameModule(View this):
	className() + ".m";

/* View Accessor */
views(Application this):
	this.name + "Views";

viewsH(Application this):
	views(this) + ".h";

viewsM(Application this):
	views(this) + ".m";

neededImports(View this):
	{ this.className() + ".h" };

className(TabView view):
	"UITabBarController";

factoryMethodSignature(View view):
	"+ (" + view.className() + " *) " + view.factoryMethodName();

factoryMethodName(View view):
	"create" + view.name;

factoryCall(View view):
	"[" + application(view).views() + " " + view.factoryMethodName() + "]";



/* Providers */
centralProvidersClassName(Application this):
	this.name + "Providers";
	
filenameCentralProvidersHeader(Application this):
	centralProvidersClassName() + ".h";
	
filenameCentralProvidersModule(Application this):
	centralProvidersClassName() + ".m";
	
applicationDelegateClassname(Application this):
	this.name + "AppDelegate";

filenameApplicationDelegateHeader(Application this):
	applicationDelegateClassname() + '.h';

filenameApplicationDelegateModule(Application this):
	applicationDelegateClassname() + '.m';

neededImports(SectionedView this):
	sections.cells.action.reject(e|e==null).neededImports().flatten().toSet();
	
neededImports(ViewAction this):
	{};	
	
neededImports(ViewCall this):
	provider.neededImports().union({view.filenameHeader()});
	
neededImports(ProviderConstruction this):
	{"IPContentProvider.h"};
	
neededImports(ComplexProviderConstruction this):
	{application().filenameCentralProvidersHeader()};

neededImports(ContentProvider this):
	{"IPXMLContentProvider.h"};

baseClassName(View this):
	"";
	
baseClassName(TableView this):
	"IPTableViewController";

baseClassName(DetailsView this):
	"IPDetailsViewController";
	
baseClassFilenameHeader(View this):
	baseClassName() + ".h";

type(SectionCell this):
	type.toString().toFirstUpper();
	
firstCell(TableView this):
	sections.first().cells.first();
	
expression(Expression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(CollectionExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(StringSplit s, String kvcTarget, String kvcPrefix):
	"[" + expression(s.value, kvcTarget, kvcPrefix) + " componentsSeparatedByString: " + expression(s.delimiter, kvcTarget, kvcPrefix) + "]";

expression(ScalarExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(StringLiteral this, String kvcTarget, String kvcPrefix):
	'@"' + value + '"';
	
expression(StringConcat this, String kvcTarget, String kvcPrefix):
	'[NSString stringWithFormat:@"' 
		+ values.collect(e|"%@").toString("") + '", '
		+ values.expression(kvcTarget, kvcPrefix).toString(", ") + "]";
		
expression(StringUrlConform this, String kvcTarget, String kvcPrefix):
	'[' + value.expression(kvcTarget, kvcPrefix) + ' stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]';
	
expression(StringReplace this, String kvcTarget, String kvcPrefix):
	'[' + 
	value.expression(kvcTarget, kvcPrefix) +
	' stringByReplacingOccurrencesOfString:' + 
	match.expression(kvcTarget, kvcPrefix) +
	' withString:' +
	replacement.expression(kvcTarget, kvcPrefix) +
	']';
	
List[String] keyPath(ObjectReference this):
	tail == null ? {object.name} : {object.name}.addAll(tail.keyPath());

List[String] keyPath(ObjectReference this, String kvcPrefix):
	let head = (kvcPrefix != "" ? {kvcPrefix} : {}):
		head.addAll(keyPath().withoutFirst());
	
expression(ObjectReference this, String kvcTarget, String kvcPrefix):
	let keyPath = keyPath(kvcPrefix):
		keyPath.isEmpty ? 
			kvcTarget : 
			'[' + kvcTarget + ' valueForKeyPath:@"' + keyPath.toString('.') + '"]';
	
contentProvider(ProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + metaType + ">";

contentProvider(SimpleProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	'[IPSimpleContentProvider providerWithContent:' +
	expression.expression(kvcTarget, kvcPrefix) +
	 ' andProviders:self.contentProvider.providers]';
	 
contentProvider(ComplexProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	'[' + providers + ' providerFor' + provider.name + 
		(argument == null ? '' : ': ' + argument.expression(kvcTarget, kvcPrefix) )
	+ ']';
	
rowCount(SectionCell this):
	iterator == null ? 1 : '[[' + iterator.collection.expression('contentProvider', 'content') +' asArray] count]'; 
	
methodSignature(ContentProvider p):
	"-(IPContentProvider*)providerFor" + p.name + (
		p.parameter != null ? ':(id)' + p.parameter.name : '') 
	;
	
providersWithImplementation(Application this):
	model().elements.typeSelect(ContentProvider);
	
allViews(Application this):
	model().elements.typeSelect(View);
	
allViewClasses(Application this):
	model().elements.typeSelect(View).removeAll(model().elements.typeSelect(TabView));