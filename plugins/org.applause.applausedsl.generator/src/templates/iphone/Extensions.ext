import org::eclipse::emf::ecore;
import org::applause::applausedsl::applauseDsl;

extension org::eclipse::xtend::util::stdlib::io;
extension templates::MetamodelExtensions;

// Objective C language support

String use(String name):
	use(newProjectClass(name));

String use(ProjectClass projectClass):
	JAVA templates.Extensions.use(org.applause.applausedsl.applauseDsl.ProjectClass);

Void useImportBag(Set[ProjectClass] bag):
	JAVA templates.Extensions.useImportBag(java.util.Set);


objcImports(Collection[String] classNames):
	classNames.toSet().remove(null).remove("").collect(e|"#import \"" + e + '.h";').toString("\n");

create Set[ProjectClass] bagHeaderImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

create Set[ProjectClass] bagModuleImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

List[ProjectClass] headerImports(ProjectClass class):
	class.bagHeaderImports().without({class}).sortBy(e|e.name);

List[ProjectClass] moduleImports(ProjectClass class):
	{class, class.bagModuleImports().without(class.bagHeaderImports()).without({class}).sortBy(e|e.name)}.flatten();

cached ProjectClass newProjectClass(String name):
	JAVA templates.Extensions.createProjectClass(java.lang.String);

h(ProjectClass class):
	useImportBag(class.bagHeaderImports()) -> (class.name + ".h");

m(ProjectClass class):
	useImportBag(class.bagModuleImports()) -> (class.name + ".m");

allocInit(ProjectClass class):
	"[[" + use(class) + " alloc] init]";

statements(Collection[String] strings):
	strings.statements("\n");

statements(Collection[String] strings, String nl):
	strings.without({null}).collect(e|e + ";").toString(nl);

pointer(ProjectClass class):
	use(class) + " *";



/* Views */

className(View this):
	use(this.name.toFirstUpper() + "ViewController");

className(CustomView this):
	use(this.className);

class(Type this):
	newProjectClass(this.name);

filenameHeader(View this):
	className() + ".h";
	
filenameModule(View this):
	className() + ".m";

/* View Accessor */
viewFactory(Application app):
	newProjectClass(app.name + "Views");

neededImports(View this):
	{ this.className() + ".h" };

className(TabView view):
	"UITabBarController";

factoryMethodSignature(View view):
	"+ (" + view.className() + " *) " + view.factoryMethodName();

factoryMethodName(View view):
	"create" + view.name;

factoryCall(View view):
	"[" + use(application(view).viewFactory()) + " " + view.factoryMethodName() + "]";

/* TableView */

class(TableView view):
	newProjectClass(view.className());

constant(TableViewStyle style):
	"UITableViewStyle" + style.name;

constant(CellType type):
	"UITableViewCellStyle" + type.literal;

constant(CellAccessory ac):
	switch(ac.name) {
		case 'Link' : 'UITableViewCellAccessoryDisclosureIndicator'
		case 'Detail' : 'UITableViewCellAccessoryDetailDisclosureButton'
		case 'Check' : 'UITableViewCellAccessoryCheckmark'
		default : 'UITableViewCellAccessoryNone'
	};
	
constructStatements(SectionCell cell, String kvcTarget):
	{
	 use('BoxCell') + ' *cell = [[BoxCell alloc] initWithStyle:' + cell.type.constant() + ' reuseIdentifier:nil]',
	 cell.text.assignment('cell.textLabel', 'text', kvcTarget),
	 cell.details.assignment('cell.detailTextLabel', 'text', kvcTarget),
	 (cell.accessory.ordinal() > 0) ? 'cell.accessoryType = ' + cell.accessory.constant() : null
	};

initSignature(TableView view):
	"- (id) init" + (view.parameters().isEmpty ? "" : "With") + view.parameters().signature().toString(" ").toFirstUpper();

parameters(TableView view):
	(List[Parameter]) (view.content != null ? { view.content } : {});

signature(Parameter param):
	param.name + ":(" + param.type() + ")" + param.name;

type(Parameter param):
	newProjectClass('IPContentProvider').pointer();

ivar(Parameter param):
	"f" + param.name.toFirstUpper();





Parameter rootParameter(CollectionExpression expr):
	throwError("abstract " + expr);

Parameter rootParameter(ScalarExpression expr):
	throwError("abstract " + expr);

Parameter rootParameter(StringLiteral expr):
	null;

Parameter rootParameter(ObjectReference ref):
 	ref.object.rootParameter();

Parameter rootParameter(VariableDeclaration this):
	throwError("rootParameter not supported " + this);

Parameter rootParameter(Parameter param):
 	param;

Parameter rootParameter(CollectionIterator it):
 	it.collection.rootParameter();


// If expr goes back to a parameter (=supplied by a content provider), resolve via content provider
// otherwise resolve directly
resolve(ScalarExpression expr):
	expr.rootParameter() != null
		? expr.expression(expr.rootParameter().ivar(), 'content')
		: expr.expression('', '');



assignment(Void expr, String targetObject, String targetProperty, String kvcTarget):
	null;

assignment(ScalarExpression expr, String targetObject, String targetProperty, String kvcTarget):
	throwError("Abstract " + expr);

assignment(StringLiteral expr, String targetObject, String targetProperty, String kvcTarget):
	targetObject + "." + targetProperty + " = " + expr.expression(kvcTarget, '');

assignment(ObjectReference expr, String targetObject, String targetProperty, String kvcTarget):
	kvcTarget == null ? '[fBindings bind:' + expr.rootParameter().ivar() + ' property:@"' + expr.keyPath('content').toString('.') + '" to:' + targetObject + ' property:@"' + targetProperty + '"]'
	                  : targetObject + "." + targetProperty + " = " + expr.expression(kvcTarget, '');



/* Providers */
providerFactory(Application app):
	newProjectClass(app.name + "Providers");

applicationDelegate(Application app):
	newProjectClass(app.name + "AppDelegate");
	
neededImports(SectionedView this):
	sections.cells.action.reject(e|e==null).neededImports().flatten().toSet();
	
neededImports(ViewAction this):
	{};	

class(ContentProviderImplementation this):
	Void;

class(FetchingContentProviderImplementation this):
	newProjectClass("IP" + this.format.name + "ContentProvider");

class(CustomContentProviderImplementation this):
	newProjectClass(this.providerClass.name);

ivar(ContentProvider provider):
	"f" + provider.name.toFirstUpper();




objcType(Type type):
	throwError("Abstract: " + type);

objcType(SimpleType type):
	type.platformType;

objcType(Entity type):
	type.runtimeType ? type.name : "NSDictionary";





neededClasses(Type this):
	{};

neededClasses(Entity this):
	this.runtimeType ? { this.class() } : {}; 


neededClasses(ViewCall this):
	provider.neededClasses().union({view.className()});

neededClasses(ContentProvider this):
	this.type.neededClasses().addAll(this.implementation == null ? {} : {this.implementation.class()});
	
neededClasses(ProviderConstruction this):
	{"IPContentProvider"};
	
neededClasses(ComplexProviderConstruction this):
	{application().providerFactory()};





baseClassName(View this):
	"";
	
baseClassName(TableView this):
	"IPTableViewController";

baseClassName(DetailsView this):
	"IPDetailsViewController";
	
baseClassFilenameHeader(View this):
	baseClassName() + ".h";

type(SectionCell this):
	type.toString().toFirstUpper();
	
firstCell(TableView this):
	sections.first().cells.first();
	
expression(Expression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(CollectionExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(StringSplit s, String kvcTarget, String kvcPrefix):
	"[" + expression(s.value, kvcTarget, kvcPrefix) + " componentsSeparatedByString: " + expression(s.delimiter, kvcTarget, kvcPrefix) + "]";

expression(ScalarExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(StringLiteral this, String kvcTarget, String kvcPrefix):
	'@"' + value + '"';
	
expression(StringConcat this, String kvcTarget, String kvcPrefix):
	'[NSString stringWithFormat:@"' 
		+ values.collect(e|"%@").toString("") + '", '
		+ values.expression(kvcTarget, kvcPrefix).toString(", ") + "]";
		
expression(StringUrlConform this, String kvcTarget, String kvcPrefix):
	'[' + value.expression(kvcTarget, kvcPrefix) + ' stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]';
	
expression(StringReplace this, String kvcTarget, String kvcPrefix):
	'[' + 
	value.expression(kvcTarget, kvcPrefix) +
	' stringByReplacingOccurrencesOfString:' + 
	match.expression(kvcTarget, kvcPrefix) +
	' withString:' +
	replacement.expression(kvcTarget, kvcPrefix) +
	']';
	
List[String] keyPath(ObjectReference this):
	tail == null ? {object.name} : {object.name}.addAll(tail.keyPath());

List[String] keyPath(ObjectReference this, String kvcPrefix):
	let head = (kvcPrefix != "" ? {kvcPrefix} : {}):
		head.addAll(keyPath().withoutFirst());
	
expression(ObjectReference this, String kvcTarget, String kvcPrefix):
	let keyPath = keyPath(kvcPrefix):
		keyPath.isEmpty ? 
			kvcTarget : 
			'[' + kvcTarget + ' valueForKeyPath:@"' + keyPath.toString('.') + '"]';
	
contentProvider(ProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + metaType + ">";

contentProvider(SimpleProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	'[IPSimpleContentProvider providerWithContent:' +
	expression.expression(kvcTarget, kvcPrefix) +
	 ' andProviders:self.contentProvider.providers]';
	 
contentProvider(ComplexProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	'[' + providers + ' providerFor' + provider.name + 
		(argument == null ? '' : ': ' + argument.expression(kvcTarget, kvcPrefix) )
	+ ']';
	
rowCount(SectionCell this):
	iterator == null ? 1 : '[[' + iterator.collection.expression('contentProvider', 'content') +' asArray] count]'; 
	
methodSignature(ContentProvider p):
	"- (IPContentProvider *) providerFor" + p.name + (
		p.parameter != null ? ':(id)' + p.parameter.name : '') 
	;
	
allProviders(Application this):
	model().elements.typeSelect(ContentProvider);
	
allViews(Application this):
	model().elements.typeSelect(View);
	
allViewClasses(Application this):
	model().elements.typeSelect(View).removeAll(model().elements.typeSelect(TabView));