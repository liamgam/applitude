import org::eclipse::emf::ecore;
import org::applause::applausedsl::applauseDsl;

extension templates::MetamodelExtensions;

// Objective C language support

objcImports(Collection[String] classNames):
	classNames.toSet().remove(null).remove("").collect(e|"#import \"" + e + '.h";').toString("\n");

objcAllocInit(String className):
	"[[" + className + " alloc] init]";

cached ProjectClass newProjectClass(String name):
	JAVA templates.Extensions.createProjectClass(java.lang.String);

h(ProjectClass this):
	this.name + ".h";

m(ProjectClass this):
	this.name + ".m";

importHeader(ProjectClass class):
	"#import \"" + class.h() + '";';

importHeader(Collection[ProjectClass] classes):
	classes.remove(null).collect(e|e.importHeader()).toString("\n");

statements(Collection[String] strings):
	strings.collect(e|e + ";").toString("\n");

className(View this):
	this.name.toFirstUpper() + "ViewController";

className(CustomView this):
	this.className;

className(Type this):
	this.name;

filenameHeader(View this):
	className() + ".h";
	
filenameModule(View this):
	className() + ".m";

/* View Accessor */
viewFactory(Application app):
	newProjectClass(app.name + "Views");

neededImports(View this):
	{ this.className() + ".h" };

className(TabView view):
	"UITabBarController";

factoryMethodSignature(View view):
	"+ (" + view.className() + " *) " + view.factoryMethodName();

factoryMethodName(View view):
	"create" + view.name;

factoryCall(View view):
	"[" + application(view).viewFactory().name + " " + view.factoryMethodName() + "]";



/* Providers */
providerFactory(Application app):
	newProjectClass(app.name + "Providers");

applicationDelegate(Application app):
	newProjectClass(app.name + "AppDelegate");
	
neededImports(SectionedView this):
	sections.cells.action.reject(e|e==null).neededImports().flatten().toSet();
	
neededImports(ViewAction this):
	{};	

className(ContentProviderImplementation this):
	"<undefined className(" + this + ")>";

className(FetchingContentProviderImplementation this):
	"IP" + this.format.name + "ContentProvider";

className(CustomContentProviderImplementation this):
	this.providerClass.name;

ivar(ContentProvider provider):
	"f" + provider.name.toFirstUpper();



neededClasses(Type this):
	{};

neededClasses(Entity this):
	this.runtimeType ? { this.className() } : {}; 


neededClasses(ViewCall this):
	provider.neededClasses().union({view.className()});

neededClasses(ContentProvider this):
	this.type.neededClasses().addAll(this.implementation == null ? {} : {this.implementation.className()});
	
neededClasses(ProviderConstruction this):
	{"IPContentProvider"};
	
neededClasses(ComplexProviderConstruction this):
	{application().providerFactory()};





baseClassName(View this):
	"";
	
baseClassName(TableView this):
	"IPTableViewController";

baseClassName(DetailsView this):
	"IPDetailsViewController";
	
baseClassFilenameHeader(View this):
	baseClassName() + ".h";

type(SectionCell this):
	type.toString().toFirstUpper();
	
firstCell(TableView this):
	sections.first().cells.first();
	
expression(Expression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(CollectionExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(StringSplit s, String kvcTarget, String kvcPrefix):
	"[" + expression(s.value, kvcTarget, kvcPrefix) + " componentsSeparatedByString: " + expression(s.delimiter, kvcTarget, kvcPrefix) + "]";

expression(ScalarExpression s, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + s.metaType + ">";
	
expression(StringLiteral this, String kvcTarget, String kvcPrefix):
	'@"' + value + '"';
	
expression(StringConcat this, String kvcTarget, String kvcPrefix):
	'[NSString stringWithFormat:@"' 
		+ values.collect(e|"%@").toString("") + '", '
		+ values.expression(kvcTarget, kvcPrefix).toString(", ") + "]";
		
expression(StringUrlConform this, String kvcTarget, String kvcPrefix):
	'[' + value.expression(kvcTarget, kvcPrefix) + ' stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]';
	
expression(StringReplace this, String kvcTarget, String kvcPrefix):
	'[' + 
	value.expression(kvcTarget, kvcPrefix) +
	' stringByReplacingOccurrencesOfString:' + 
	match.expression(kvcTarget, kvcPrefix) +
	' withString:' +
	replacement.expression(kvcTarget, kvcPrefix) +
	']';
	
List[String] keyPath(ObjectReference this):
	tail == null ? {object.name} : {object.name}.addAll(tail.keyPath());

List[String] keyPath(ObjectReference this, String kvcPrefix):
	let head = (kvcPrefix != "" ? {kvcPrefix} : {}):
		head.addAll(keyPath().withoutFirst());
	
expression(ObjectReference this, String kvcTarget, String kvcPrefix):
	let keyPath = keyPath(kvcPrefix):
		keyPath.isEmpty ? 
			kvcTarget : 
			'[' + kvcTarget + ' valueForKeyPath:@"' + keyPath.toString('.') + '"]';
	
contentProvider(ProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	"<!ERROR!" + metaType + ">";

contentProvider(SimpleProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	'[IPSimpleContentProvider providerWithContent:' +
	expression.expression(kvcTarget, kvcPrefix) +
	 ' andProviders:self.contentProvider.providers]';
	 
contentProvider(ComplexProviderConstruction this, String providers, String kvcTarget, String kvcPrefix):
	'[' + providers + ' providerFor' + provider.name + 
		(argument == null ? '' : ': ' + argument.expression(kvcTarget, kvcPrefix) )
	+ ']';
	
rowCount(SectionCell this):
	iterator == null ? 1 : '[[' + iterator.collection.expression('contentProvider', 'content') +' asArray] count]'; 
	
methodSignature(ContentProvider p):
	"- (IPContentProvider *) providerFor" + p.name + (
		p.parameter != null ? ':(id)' + p.parameter.name : '') 
	;
	
allProviders(Application this):
	model().elements.typeSelect(ContentProvider);
	
allViews(Application this):
	model().elements.typeSelect(View);
	
allViewClasses(Application this):
	model().elements.typeSelect(View).removeAll(model().elements.typeSelect(TabView));