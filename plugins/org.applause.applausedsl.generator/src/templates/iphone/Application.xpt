«IMPORT org::applause::applausedsl::applauseDsl»

«EXTENSION templates::iphone::Extensions»

«DEFINE main FOR Model»
«EXPAND main FOR elements.typeSelect(Application).first()»
«ENDDEFINE»

«DEFINE main FOR Application»
«EXPAND headerFile»
«EXPAND moduleFile»
«ENDDEFINE»

«DEFINE headerFile FOR Application»
«FILE filenameApplicationDelegateHeader()»
#import <UIKit/UIKit.h>

@interface «applicationDelegateClassname()» : NSObject <UIApplicationDelegate> {
	UIWindow *window;
	UIViewController *rootController;
}

@property (nonatomic, retain) IBOutlet UIWindow *window;
@property (nonatomic, retain) UIViewController *rootController;

@end
«ENDFILE»
«ENDDEFINE»

«DEFINE importStatements FOR Application-»
«EXPAND importStatement FOREACH tabs-»
«ENDDEFINE»

«DEFINE importStatement FOR Tab-»
#import "«view.view.filenameHeader()»"
«ENDDEFINE»

«DEFINE moduleFile FOR Application»
«FILE filenameApplicationDelegateModule()»
#import "«filenameApplicationDelegateHeader()»"
#import "IPUIView.h"
#import "«filenameCentralProvidersHeader()»"

«EXPAND importStatements-»

@implementation «applicationDelegateClassname()»

#pragma mark -
#pragma mark Properties

@synthesize window;
@synthesize rootController;

#pragma mark -
#pragma mark View Management

- (UIViewController*) createTabBarController {
	«centralProvidersClassName()» *providers = [[[«centralProvidersClassName()» alloc] init] autorelease];
	UITabBarController *result = [[UITabBarController alloc] init];
	NSMutableArray *controllers = [NSMutableArray array];

«EXPAND barControllerInstance FOREACH tabs»

	result.viewControllers = controllers;
	return result;
}

#pragma mark -
#pragma mark Application life cycle

/*
 * Set up background (if enabled) and main window layout.
 */
- (void)applicationDidFinishLaunching:(UIApplication *)application {
	application.statusBarStyle = UIStatusBarStyleBlackOpaque;
	«IF this.background != null»
	UIImageView *backgroundImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:«this.background.expression('','')»]];
	[window addSubview:backgroundImageView];
	[backgroundImageView release];
	«ENDIF»

	// Create a window (in case this is not created using a .xib)
	if (!self.window) {
		self.window = [[UIWindow alloc] initWithFrame:CGRectMake(0, 0, 320, 480)];
		[self.window release];
	}

	self.rootController = [self createTabBarController];
	[window addSubview: [self.rootController view]];
	[window makeKeyAndVisible];
}

#pragma mark -
#pragma mark Memory management

/*
 * Clean up.
 */
- (void)dealloc {
	self.rootController = nil;
	[window release];
	[super dealloc];
}

@end
«ENDFILE»
«ENDDEFINE»

«DEFINE barControllerInstance FOR Tab»
	{
		UIViewController *controller = [[«view.view.className()» alloc] init];
		«IF view.provider != null-»
		IPContentProvider *contentProvider = «view.provider.contentProvider('providers', '', '')»;
		[(UIViewController<IPUIView> *) controller setContentProvider: contentProvider];
		«ENDIF-»
		UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:controller];
		navController.tabBarItem.title = «title.expression('', '')»;
		«IF this.icon != null-»
		navController.tabBarItem.image = [UIImage imageNamed:«this.icon.expression('','')»];
		«ENDIF-»
		[controllers addObject: navController];
		[controller release];
		[navController release];
	}
«ENDDEFINE»

«REM»
TODO: Branding property: navController.navigationBar.barStyle = UIBarStyleBlack;
«ENDREM»	
